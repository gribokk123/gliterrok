const express = require("express")
const http = require("http")
const WebSocket = require("ws")
const cors = require("cors")
const path = require("path")
const fs = require("fs")

const Database = require("./database")
const WebSocketHandler = require("./websocket-handler")
const GameEngine = require("./game-engine")

class MafiaGameServer {
  constructor() {
    this.app = express()
    this.server = http.createServer(this.app)
    this.wss = new WebSocket.Server({ server: this.server })

    this.db = new Database()
    this.gameEngine = new GameEngine()
    this.wsHandler = new WebSocketHandler(this.wss, this.db, this.gameEngine)

    this.setupMiddleware()
    this.setupRoutes()
    this.setupErrorHandling()

    this.port = process.env.PORT || 3000
  }

  setupMiddleware() {
    // CORS
    this.app.use(
      cors({
        origin: "*",
        methods: ["GET", "POST", "PUT", "DELETE"],
        allowedHeaders: ["Content-Type", "Authorization"],
      }),
    )

    // JSON –ø–∞—Ä—Å–µ—Ä
    this.app.use(express.json({ limit: "10mb" }))
    this.app.use(express.urlencoded({ extended: true }))

    // –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã
    this.app.use("/static", express.static(path.join(__dirname, "public")))

    // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    this.app.use((req, res, next) => {
      console.log(`${new Date().toISOString()} - ${req.method} ${req.path}`)
      next()
    })
  }

  setupRoutes() {
    // API –º–∞—Ä—à—Ä—É—Ç—ã
    this.app.use("/api", this.createApiRoutes())

    // –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
    this.app.get("/", (req, res) => {
      res.json({
        name: "Mafia Game Server",
        version: "1.0.0",
        status: "running",
        uptime: process.uptime(),
        stats: {
          ...this.wsHandler.getStats(),
          ...this.gameEngine.getGameStats(),
        },
      })
    })

    // –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    this.app.get("/admin", (req, res) => {
      res.send(this.generateAdminPage())
    })
  }

  createApiRoutes() {
    const router = express.Router()

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω–∏–∫–Ω–µ–π–º–∞
    router.post("/check-nickname", async (req, res) => {
      try {
        const { nickname } = req.body

        if (!nickname) {
          return res.status(400).json({ error: "–ù–∏–∫–Ω–µ–π–º –Ω–µ —É–∫–∞–∑–∞–Ω" })
        }

        const exists = await this.db.userExists(nickname)
        res.json({ isUnique: !exists })
      } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∏–∫–Ω–µ–π–º–∞:", error)
        res.status(500).json({ error: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" })
      }
    })

    // –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    router.post("/users", async (req, res) => {
      try {
        const userData = req.body

        // –í–∞–ª–∏–¥–∞—Ü–∏—è
        if (!userData.nickname || userData.nickname.length < 3) {
          return res.status(400).json({ error: "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–∏–∫–Ω–µ–π–º" })
        }

        const user = await this.db.createUser(userData)
        res.status(201).json(user)
      } catch (error) {
        console.error("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", error)
        res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è" })
      }
    })

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    router.get("/users/:nickname", async (req, res) => {
      try {
        const { nickname } = req.params
        const user = await this.db.getUser(nickname)

        if (!user) {
          return res.status(404).json({ error: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω" })
        }

        res.json(user)
      } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", error)
        res.status(500).json({ error: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" })
      }
    })

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–æ–º–Ω–∞—Ç
    router.get("/rooms", async (req, res) => {
      try {
        const rooms = await this.db.getRooms()
        res.json(rooms)
      } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–º–Ω–∞—Ç:", error)
        res.status(500).json({ error: "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–º–Ω–∞—Ç" })
      }
    })

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
    router.get("/stats", (req, res) => {
      res.json({
        server: {
          uptime: process.uptime(),
          memory: process.memoryUsage(),
          timestamp: new Date().toISOString(),
        },
        websocket: this.wsHandler.getStats(),
        game: this.gameEngine.getGameStats(),
      })
    })

    // –ó–¥–æ—Ä–æ–≤—å–µ —Å–µ—Ä–≤–µ—Ä–∞
    router.get("/health", (req, res) => {
      res.json({
        status: "healthy",
        timestamp: new Date().toISOString(),
        uptime: process.uptime(),
      })
    })

    return router
  }

  setupErrorHandling() {
    // 404 –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    this.app.use((req, res) => {
      res.status(404).json({
        error: "–ú–∞—Ä—à—Ä—É—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω",
        path: req.path,
        method: req.method,
      })
    })

    // –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    this.app.use((error, req, res, next) => {
      console.error("–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:", error)
      res.status(500).json({
        error: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞",
        message: process.env.NODE_ENV === "development" ? error.message : undefined,
      })
    })
  }

  generateAdminPage() {
    const stats = {
      ...this.wsHandler.getStats(),
      ...this.gameEngine.getGameStats(),
    }

    return `
        <!DOCTYPE html>
        <html>
        <head>
            <title>Mafia Game Server - Admin</title>
            <meta charset="utf-8">
            <style>
                body { font-family: Arial, sans-serif; margin: 20px; background: #f5f5f5; }
                .container { max-width: 1200px; margin: 0 auto; }
                .card { background: white; padding: 20px; margin: 20px 0; border-radius: 8px; box-shadow: 0 2px 4px rgba(0,0,0,0.1); }
                .stats { display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 20px; }
                .stat { text-align: center; padding: 20px; background: #667eea; color: white; border-radius: 8px; }
                .stat-value { font-size: 2em; font-weight: bold; }
                .stat-label { font-size: 0.9em; opacity: 0.9; }
                h1 { color: #333; text-align: center; }
                h2 { color: #667eea; border-bottom: 2px solid #667eea; padding-bottom: 10px; }
                .refresh { background: #27ae60; color: white; border: none; padding: 10px 20px; border-radius: 4px; cursor: pointer; }
            </style>
        </head>
        <body>
            <div class="container">
                <h1>üé≠ Mafia Game Server</h1>
                
                <div class="card">
                    <h2>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</h2>
                    <div class="stats">
                        <div class="stat">
                            <div class="stat-value">${stats.connectedUsers || 0}</div>
                            <div class="stat-label">–ü–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</div>
                        </div>
                        <div class="stat">
                            <div class="stat-value">${stats.activeRooms || 0}</div>
                            <div class="stat-label">–ê–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç</div>
                        </div>
                        <div class="stat">
                            <div class="stat-value">${stats.activeGames || 0}</div>
                            <div class="stat-label">–ê–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä</div>
                        </div>
                        <div class="stat">
                            <div class="stat-value">${Math.round(process.uptime() / 60)}</div>
                            <div class="stat-label">–ú–∏–Ω—É—Ç —Ä–∞–±–æ—Ç—ã</div>
                        </div>
                    </div>
                </div>
                
                <div class="card">
                    <h2>üîß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ</h2>
                    <button class="refresh" onclick="location.reload()">–û–±–Ω–æ–≤–∏—Ç—å</button>
                    <button class="refresh" onclick="fetch('/api/stats').then(r=>r.json()).then(console.log)">–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É</button>
                </div>
                
                <div class="card">
                    <h2>üìù –õ–æ–≥–∏</h2>
                    <div id="logs" style="background: #f8f9fa; padding: 15px; border-radius: 4px; font-family: monospace; max-height: 300px; overflow-y: auto;">
                        –õ–æ–≥–∏ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è...
                    </div>
                </div>
            </div>
            
            <script>
                // –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
                setInterval(() => {
                    location.reload();
                }, 30000);
                
                // –ó–∞–≥—Ä—É–∑–∫–∞ –ª–æ–≥–æ–≤ (–∑–∞–≥–ª—É—à–∫–∞)
                document.getElementById('logs').innerHTML = 
                    new Date().toISOString() + ' - –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω\\n' +
                    new Date().toISOString() + ' - WebSocket —Å–µ—Ä–≤–µ—Ä –∞–∫—Ç–∏–≤–µ–Ω\\n' +
                    new Date().toISOString() + ' - –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∞';
            </script>
        </body>
        </html>
        `
  }

  async start() {
    try {
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
      await this.db.init()
      console.log("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")

      // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
      this.server.listen(this.port, () => {
        console.log(`üöÄ Mafia Game Server –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${this.port}`)
        console.log(`üìä –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å: http://localhost:${this.port}/admin`)
        console.log(`üîå WebSocket: ws://localhost:${this.port}`)
        console.log(`üåê API: http://localhost:${this.port}/api`)
      })

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
      process.on("SIGTERM", () => this.shutdown())
      process.on("SIGINT", () => this.shutdown())
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:", error)
      process.exit(1)
    }
  }

  async shutdown() {
    console.log("üõë –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–µ—Ä–∞...")

    try {
      // –ó–∞–∫—Ä—ã–≤–∞–µ–º WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
      this.wss.clients.forEach((client) => {
        client.close()
      })

      // –ó–∞–∫—Ä—ã–≤–∞–µ–º HTTP —Å–µ—Ä–≤–µ—Ä
      this.server.close()

      // –ó–∞–∫—Ä—ã–≤–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
      await this.db.close()

      console.log("‚úÖ –°–µ—Ä–≤–µ—Ä —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É")
      process.exit(0)
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã:", error)
      process.exit(1)
    }
  }
}

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
if (require.main === module) {
  const server = new MafiaGameServer()
  server.start()
}

module.exports = MafiaGameServer
